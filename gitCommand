Code share: Git, CVS, SVN, ClearCase, VSS(Visual Studio)

Git:
pwd: show the location


-> git commit -m "add readme"

you can add three txt and just one commit

-> we add this sentence and use $ git status to check what happen

add hello, we want to know if git diff work



->git diff shows the difference

Attention, you change your file but if not add or commit on git, then they are not change in there.

You can review all the version you have commit, let's have a try with git log.



->git log: 

show all the version from most currently to most far away. Press q for done.

The current is HEAD, and the one before last one is HEAD^, HEAD^^. with git reset HEAD^.




->git reset --hard HEAD^             

the file will change to the previous one

->git rest --hard 597914ec

How ever, if you want to change back the most recently one, you can do like this:




->git reflog

597914ec is a ID of version. You can get all ID of your have changed


->cat filename                  
show the content of the file



test:
Hi, I am planning to learn more. It is a tough time, but I can survive.

Hi, the stupid boring man always yarn at the dog.


Two step to cancel a change that you add to git:

->git reset HEAD filename

reset the HEAD filename. 

->git checkout -- filename

Clear the work space of this file. However, this is not work on my terminal.



delete:

-> rm filename         

Just remove in workspace, but not in buffer, and you can use : git status to check

->git status

it will show you that file is deleted. There are two choice: deleted and recover

-> git rm filename    ->git commit -m "delete"

-> git checkout -- filename

The second command line is recover.




local load to remote Github

-> cd ~/.ssh
check if you have .ssh, if don't have, you need to generate one

->ssh-keygen -t rsa -C XXXx@gmail.com
generate ssh 

-> git remote add Name git@github.com:Yollyliu/learngit.git
-> git push -u Name master
then you can get the file on your Github

->$ git push Name master
Everytime you are put your file to Github




From remote Github to local:

first build a new repostory, 

->$ git clone git@github.com:michaelliao/Name.git

However, I tried a existed local file and existed repostory in Github, it seems not work.





Build new divide:

$git checkout -b dev

build a new branch dev

$git branch

it will list all branches, and the current branch marked as "*".

-vim readme.txt   // entry readme 
-i   //insert readme.txt
esc + :wq   //store and quit

switch back to master branch:

$git checkout master

when switch back to master, and open readme.txt, find it was not changed.

$ git merge dev

merge dev with master, what change in dev will be reflect on master.(fast forward)

Attention: before you merge, you should add and commit what readme.txt have modified.


If there is a merge conflict, you should 1. $git status to see the modified file,
2. open the txt, and change " <<<HEAD ======= >>>>>>>New branck name " to the content you want, then add and commit



1. If you meet problem when "git push Name master", then it must be changed "readme.txt" or "license". Three steps :
1. git remote add origin
2. git pull origin master
3. git push origin master

Then delete dev:

&git branch -d dev

$git merge --no-ff -m "merge with no-ff" dev
Another way for merge is :  --no-ff , which is forbidden fast forward.  If you use fast forward,
when you delete branch, information on that branch will also discard.



There is a problem, the passage above cannot be shown on Github, even though I check it several time in my local gitCommand. Cannot find reason, so I add this passage, planning to commit and then push to Github to check if it works.



If you open a dev and have not finish,,and same time, you need debug. Then:

$git stash            // store the current place

Saved working directory and index state WIP on dev: f52c633 add merge.


After this, you can build new branch to fix bug. If you want to fix master bug,
then build a new branch in master.

$git checkout master

$git checkout -b issue-101

//build a new branch in master, and debug

$git checkout master

$git merge --n0-ff -m "merge bug 101" issue-101

$git branch -d issue-101   //delete issue-101 branch

switch to dev and work on:

$git checkout dev

$git status
find nothing in the workplace, and we should list it out

$git stash list
It will show the workplace, however, it need recover, there are two ways to finish it:

$git stash apply stash{0}
// it will show the workplace, but not delete it, you will use drop to delete it. You can use it
if there are many version.
$git stash drop


$git stash pop 
//it will show the workplace, and at the same time, delete it.

Conclusion: if you haven't done your work, and need bug, first use git stash to store, and when finish the bug, use git stash pop/git stash apply to return the workplace.






If you open a dev and have not finish,,and same time, you need debug. Then:

$git stash            // store the current place

Saved working directory and index state WIP on dev: f52c633 add merge.


After this, you can build new branch to fix bug. If you want to fix master bug, then build a new
branch in master.

$git checkout master

$git checkout -b issue-101

//build a new branch in master, and debug
